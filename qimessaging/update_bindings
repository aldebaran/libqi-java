#!/usr/bin/env python

"""
Little tool to manage all maven operations for qiMessaging Java bindings

"""

from optparse import OptionParser
import subprocess


"""
Global values
"""
__usage__  = "./do --platform={android, desktop} [--release=true]"
jarname    = "nativeqimessaging-"#platform
default_repo_url = "/tmp/maven/"#jarname

def jar_package(jarname, file_list, is_release, config=None):
    """
    Package file info jar file
    """
    callee = ["qimvn", "jar"]
    if config and config != "desktop":
        callee += ["-c", config]
    if is_release:
        callee += ["--release"]

    callee += [jarname] + file_list
    return subprocess.call(callee)

def deploy(artifact_id, filename, url, version = "1.0-SNAPSHOT", group_id = "com.aldebaran", packaging_format = "jar"):
    """
    Call to maven deploy goal
    """
    skip_test   = "-Dmaven.test.skip=true"
    group_id    = ["--groupId", group_id]
    version     = ["--version", version]
    artifact_id = ["--artifactId", artifact_id]
    url         = ["--url", url]
    packaging   = ["--packaging", packaging_format]

    callee = ["qimvn", "deploy", filename] + group_id + version + artifact_id + url + packaging
    return subprocess.call(callee)

def deploy_native_package(platform):
    """
    Package qiMessaging Java bindings and
    deploy them with Maven
    """
    if platform != "android":
        platform = "desktop"
    pom_name = "pom-" + platform + ".xml"
    packaging_format = "jar"
    callee = ["qimvn", "package", "--pom", pom_name, "--skip-test"]

    if subprocess.call(callee) is not 0:
        return 1


    jarname = "qimessaging"
    if platform == "android":
        jarname += "-apklib"
        packaging_format = "apklib"
    jarname += "-1.0-SNAPSHOT"
    if platform == "android":
        jarname += ".apklib"
    else:
        jarname += ".jar"

    url = "file:///tmp/maven/qimessaging-" + platform
    return deploy("qimessaging", "target/" + jarname, url, packaging_format = packaging_format)

def package_native_libraries(platform, is_release):
    """
    Package all native libraries in a jar and
    deploy them with Maven
    """

    native_librairies = ["qi", "qitype", "qimessaging", "qimessagingjni"]
    artifact_id = jarname + platform
    jar_name = artifact_id + ".jar"
    url = "file://" + default_repo_url + artifact_id
    config = platform

    if platform == "android":
        native_librairies += ["gnustl_shared"]
        config = "android"

    # Generate a jar package containing native libraries
    if jar_package(jar_name, native_librairies, is_release, config=config) is not 0:
        return 1

    # Deploy generated jar
    if deploy(artifact_id, jar_name, url) is not 0:
        return 1

    # Remove generated jar
    callee = ["rm", jar_name]
    return subprocess.call(callee)

def deploy_bindings(platform, is_release):
    """
    Deploy qimessaging bindings using Maven
    """
    if package_native_libraries(platform, is_release) is not 0:
        return False
    if deploy_native_package(platform) is not 0:
        return False
    return True

if __name__ == "__main__":
    opt_parser = OptionParser(usage=__usage__)

    opt_parser.set_defaults(
        platform = "desktop",
        release=False,
        dest = default_repo_url
        )

    opt_parser.add_option("--platform=", dest="platform", help="Platform to configure")
    opt_parser.add_option("--release", dest="release")
    (opts, _args) = opt_parser.parse_args()

    if opts.release:
        print("release !")
    else:
        print("pas release")
    deploy_bindings(opts.platform, opts.release)
